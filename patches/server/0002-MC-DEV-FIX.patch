From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: IPECTER <ipectert@gmail.com>
Date: Wed, 11 Jan 2023 00:22:03 +0900
Subject: [PATCH] MC-DEV-FIX


diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 5c1503f5b173138fc9e918d5562a981ca8b66d06..76df2c4c909972a29302c1fdaae2a933e718b85f 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -26,7 +26,7 @@ import java.net.URL;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.spi.FileSystemProvider;
-import java.security.AccessController;
+//import java.security.AccessController; // Deepslate - Decompile Fix
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 import java.time.Duration;
diff --git a/src/main/java/net/minecraft/world/entity/ai/Brain.java b/src/main/java/net/minecraft/world/entity/ai/Brain.java
index dea20f16ac97402f754c8e47d03e9ef38de73190..5cb80cee1b77f1dbb9be32d7ff9c534edfeef225 100644
--- a/src/main/java/net/minecraft/world/entity/ai/Brain.java
+++ b/src/main/java/net/minecraft/world/entity/ai/Brain.java
@@ -72,15 +72,15 @@ public class Brain<E extends LivingEntity> {
             }
 
             public <T> DataResult<Brain<E>> decode(DynamicOps<T> dynamicOps, MapLike<T> mapLike) {
-                MutableObject<DataResult<ImmutableList.Builder<Brain.MemoryValue<?>>>> mutableObject = new MutableObject<>(DataResult.success(ImmutableList.builder()));
+                MutableObject<DataResult<ImmutableList.Builder<Brain.MemoryValue<?>>>> mutableObject2 = new MutableObject<>(DataResult.success(ImmutableList.builder())); // Deepslate - Decompile Fix
                 mapLike.entries().forEach((pair) -> {
                     DataResult<MemoryModuleType<?>> dataResult = BuiltInRegistries.MEMORY_MODULE_TYPE.byNameCodec().parse(dynamicOps, pair.getFirst());
                     DataResult<? extends Brain.MemoryValue<?>> dataResult2 = dataResult.flatMap((memoryType) -> {
                         return this.captureRead(memoryType, dynamicOps, (T)pair.getSecond());
                     });
-                    mutableObject.setValue(mutableObject.getValue().apply2(ImmutableList.Builder::add, dataResult2));
+                    mutableObject2.setValue(mutableObject2.getValue().apply2(ImmutableList.Builder::add, dataResult2)); // Deepslate - Decompile Fix
                 });
-                ImmutableList<Brain.MemoryValue<?>> immutableList = mutableObject.getValue().resultOrPartial(Brain.LOGGER::error).map(ImmutableList.Builder::build).orElseGet(ImmutableList::of);
+                ImmutableList<Brain.MemoryValue<?>> immutableList = mutableObject2.getValue().resultOrPartial(Brain.LOGGER::error).map(ImmutableList.Builder::build).orElseGet(ImmutableList::of); // Deepslate - Decompile Fix
                 return DataResult.success(new Brain<>(memoryModules, sensors, immutableList, mutableObject::getValue));
             }
 
@@ -181,14 +181,14 @@ public class Brain<E extends LivingEntity> {
         if (optional == null) {
             throw new IllegalStateException("Unregistered memory fetched: " + type);
         } else {
-            return optional.map(ExpirableValue::getValue);
+            return (Optional)optional.map(ExpirableValue::getValue); // Deepslate - Decompile Fix
         }
     }
 
     @Nullable
     public <U> Optional<U> getMemoryInternal(MemoryModuleType<U> type) {
         Optional<? extends ExpirableValue<?>> optional = this.memories.get(type);
-        return optional == null ? null : optional.map(ExpirableValue::getValue);
+        return optional == null ? null : (Optional)optional.map(ExpirableValue::getValue); // Deepslate - Decompile Fix
     }
 
     public <U> long getTimeUntilExpiry(MemoryModuleType<U> type) {
@@ -483,7 +483,7 @@ public class Brain<E extends LivingEntity> {
         private final Optional<? extends ExpirableValue<U>> value;
 
         static <U> Brain.MemoryValue<U> createUnchecked(MemoryModuleType<U> type, Optional<? extends ExpirableValue<?>> data) {
-            return new Brain.MemoryValue<>(type, data);
+            return new Brain.MemoryValue<>(type, (Optional)data);
         }
 
         MemoryValue(MemoryModuleType<U> type, Optional<? extends ExpirableValue<U>> data) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java b/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
index 915c1cbcc0ecf634cc76f02bba53dc82d22be698..064b3210960ceb8ee238b78e09802aa38e2c622c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/SurfaceRules.java
@@ -176,10 +176,10 @@ public class SurfaceRules {
         }
 
         @Override
-        public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
+        public SurfaceRules.Condition apply(final SurfaceRules.Context surfaceRulesContext) { // Deepslate - Decompile Fix
             class BiomeCondition extends SurfaceRules.LazyYCondition {
                 BiomeCondition() {
-                    super(context);
+                    super(surfaceRulesContext); // Deepslate - Decompile Fix
                 }
 
                 @Override
@@ -494,12 +494,12 @@ public class SurfaceRules {
         }
 
         @Override
-        public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            final NormalNoise normalNoise = context.randomState.getOrCreateNoise(this.noise);
+        public SurfaceRules.Condition apply(final SurfaceRules.Context surfaceRulesContext) { // Deepslate - Decompile Fix
+            final NormalNoise normalNoise = surfaceRulesContext.randomState.getOrCreateNoise(this.noise); // Deepslate - Decompile Fix
 
             class NoiseThresholdCondition extends SurfaceRules.LazyXZCondition {
                 NoiseThresholdCondition() {
-                    super(context);
+                    super(surfaceRulesContext); // Deepslate - Decompile Fix
                 }
 
                 @Override
@@ -622,12 +622,12 @@ public class SurfaceRules {
         }
 
         @Override
-        public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
+        public SurfaceRules.Condition apply(final SurfaceRules.Context surfaceRulesContext) { // Deepslate - Decompile Fix
             final boolean bl = this.surfaceType == CaveSurface.CEILING;
 
             class StoneDepthCondition extends SurfaceRules.LazyYCondition {
                 StoneDepthCondition() {
-                    super(context);
+                    super(surfaceRulesContext); // Deepslate - Decompile Fix
                 }
 
                 @Override
@@ -699,26 +699,26 @@ public class SurfaceRules {
         }
 
         @Override
-        public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
-            final int i = this.trueAtAndBelow().resolveY(context.context);
-            final int j = this.falseAtAndAbove().resolveY(context.context);
-            final PositionalRandomFactory positionalRandomFactory = context.randomState.getOrCreateRandomFactory(this.randomName());
+        public SurfaceRules.Condition apply(final SurfaceRules.Context surfaceRulesContext) { // Fusion - Decompile Fix
+            final int i = this.trueAtAndBelow().resolveY(surfaceRulesContext.context); // Deepslate - Decompile Fix
+            final int j = this.falseAtAndAbove().resolveY(surfaceRulesContext.context); // Deepslate - Decompile Fix
+            final PositionalRandomFactory positionalRandomFactory = surfaceRulesContext.randomState.getOrCreateRandomFactory(this.randomName()); // Deepslate - Decompile Fix
 
             class VerticalGradientCondition extends SurfaceRules.LazyYCondition {
                 VerticalGradientCondition() {
-                    super(context);
+                    super(surfaceRulesContext); // Deepslate - Decompile Fix
                 }
 
                 @Override
                 protected boolean compute() {
-                    int i = this.context.blockY;
-                    if (i <= i) {
+                    int ix = this.context.blockY; // Deepslate - Decompile Fix
+                    if (ix <= i) { // Deepslate - Decompile Fix
                         return true;
-                    } else if (i >= j) {
+                    } else if (ix >= j) { // Deepslate - Decompile Fix
                         return false;
                     } else {
-                        double d = Mth.map((double)i, (double)i, (double)j, 1.0D, 0.0D);
-                        RandomSource randomSource = positionalRandomFactory.at(this.context.blockX, i, this.context.blockZ);
+                        double d = Mth.map((double)ix, (double)i, (double)j, 1.0D, 0.0D); // Fusion - Decompile Fix
+                        RandomSource randomSource = positionalRandomFactory.at(this.context.blockX, ix, this.context.blockZ); // Deepslate - Decompile Fix
                         return (double)randomSource.nextFloat() < d;
                     }
                 }
@@ -739,10 +739,10 @@ public class SurfaceRules {
         }
 
         @Override
-        public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
+        public SurfaceRules.Condition apply(final SurfaceRules.Context surfaceRulesContext) { // Deepslate - Decompile Fix
             class WaterCondition extends SurfaceRules.LazyYCondition {
                 WaterCondition() {
-                    super(context);
+                    super(surfaceRulesContext); // Deepslate - Decompile Fix
                 }
 
                 @Override
@@ -766,10 +766,10 @@ public class SurfaceRules {
         }
 
         @Override
-        public SurfaceRules.Condition apply(final SurfaceRules.Context context) {
+        public SurfaceRules.Condition apply(final SurfaceRules.Context surfaceRulesContext) {
             class YCondition extends SurfaceRules.LazyYCondition {
                 YCondition() {
-                    super(context);
+                    super(surfaceRulesContext);
                 }
 
                 @Override
