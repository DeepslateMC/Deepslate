From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Pancakse <pancakseyt@gmail.com>
Date: Tue, 21 Nov 2023 18:52:22 +0700
Subject: [PATCH] Boat Settings


diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index c314febb75a85ef12051bde392c5b57e9c5d85ac..7f8a42a334262d79bfc9f4b84272d64dad389d21 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -401,7 +401,18 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
         }
 
         if (!this.level().isClientSide && this.outOfControlTicks >= 60.0F) {
-            this.ejectPassengers();
+            // Deepslate start - Don't eject players
+            if (this.level().deepslateConfig.dontEjectPlayerFromBoatUnderwater) {
+                for (int i = this.passengers.size() - 1; i >= 0; --i) {
+                    Entity passenger = this.passengers.get(i);
+                    if (!(passenger instanceof Player)) {
+                        passenger.stopRiding();
+                    }
+                }
+            } else {
+                this.ejectPassengers();
+            }
+            // Deepslate end
         }
 
         if (this.getHurtTime() > 0) {
@@ -914,7 +925,13 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
 
     @Override
     public InteractionResult interact(Player player, InteractionHand hand) {
-        return player.isSecondaryUseActive() ? InteractionResult.PASS : (this.outOfControlTicks < 60.0F ? (!this.level().isClientSide ? (player.startRiding(this) ? InteractionResult.CONSUME : InteractionResult.PASS) : InteractionResult.SUCCESS) : InteractionResult.PASS);
+        // Deepslate start - always allow to enter the boat
+        if (this.level().deepslateConfig.alwaysAllowToEnterTheBoat) {
+            return player.isSecondaryUseActive() ? InteractionResult.PASS : (true || this.outOfControlTicks < 60.0F ? (!this.level().isClientSide ? (player.startRiding(this) ? InteractionResult.CONSUME : InteractionResult.PASS) : InteractionResult.SUCCESS) : InteractionResult.PASS);
+        } else {
+            return player.isSecondaryUseActive() ? InteractionResult.PASS : (this.outOfControlTicks < 60.0F ? (!this.level().isClientSide ? (player.startRiding(this) ? InteractionResult.CONSUME : InteractionResult.PASS) : InteractionResult.SUCCESS) : InteractionResult.PASS);
+        }
+        // Deepslate end
     }
 
     @Override
@@ -1010,7 +1027,13 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
 
     @Override
     protected boolean canAddPassenger(Entity passenger) {
-        return this.getPassengers().size() < this.getMaxPassengers() && !this.isEyeInFluid(FluidTags.WATER);
+        // Deepslate start - always allow to enter the boat
+        if (this.level().deepslateConfig.alwaysAllowToEnterTheBoat) {
+            return this.getPassengers().size() < this.getMaxPassengers()/* && !this.isEyeInFluid(FluidTags.WATER)*/;
+        } else {
+            return this.getPassengers().size() < this.getMaxPassengers() && !this.isEyeInFluid(FluidTags.WATER);
+        }
+        // Deepslate end
     }
 
     protected int getMaxPassengers() {
diff --git a/src/main/java/org/deepslatemc/deepslate/configuration/DeepslateWorldConfig.java b/src/main/java/org/deepslatemc/deepslate/configuration/DeepslateWorldConfig.java
index 66f8714ec2fe1b0cd55a7939adac6ebdc108dd93..0e0ef36e9a7c8b1e943b5eff8ccae5b6f2988c10 100644
--- a/src/main/java/org/deepslatemc/deepslate/configuration/DeepslateWorldConfig.java
+++ b/src/main/java/org/deepslatemc/deepslate/configuration/DeepslateWorldConfig.java
@@ -77,4 +77,11 @@ public class DeepslateWorldConfig {
         final Map<String, Object> value = DeepslateConfig.getMap("world-settings." + worldName + "." + path, null);
         return value.isEmpty() ? fallback : value;
     }
+
+    public boolean dontEjectPlayerFromBoatUnderwater = true;
+    public boolean alwaysAllowToEnterTheBoat = true;
+    private void boatFeatures() {
+        dontEjectPlayerFromBoatUnderwater = getBoolean("gameplay-mechanics.boat.dont-eject-players-from-boat-underwater", dontEjectPlayerFromBoatUnderwater);
+        alwaysAllowToEnterTheBoat = getBoolean("gameplay-mechanics.boat.always-allow-to-enter-the-boat", alwaysAllowToEnterTheBoat);
+    }
 }
\ No newline at end of file
